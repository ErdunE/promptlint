class p{contentScriptStatus=new Map;errorReports=[];extensionStats={totalActivations:0,successfulInitializations:0,errorCount:0,supportedSites:["ChatGPT","Claude"],version:"0.2.0"};constructor(){this.initializeEventListeners(),console.log("[PromptLint Background] Service worker initialized")}initializeEventListeners(){chrome.runtime.onInstalled.addListener(t=>{this.handleInstallation(t)}),chrome.runtime.onStartup.addListener(()=>{this.handleStartup()}),chrome.runtime.onMessage.addListener((t,e,r)=>(this.handleMessage(t,e,r),!0)),chrome.tabs.onUpdated.addListener((t,e,r)=>{this.handleTabUpdate(t,e,r)}),chrome.tabs.onRemoved.addListener(t=>{this.handleTabRemoved(t)}),chrome.action.onClicked.addListener(t=>{this.handleActionClick(t)})}handleInstallation(t){if(console.log("[PromptLint Background] Extension installed:",t.reason),t.reason==="install")this.showWelcomeNotification(),this.initializeExtensionData();else if(t.reason==="update"){const e=t.previousVersion;console.log(`[PromptLint Background] Updated from ${e} to ${this.extensionStats.version}`),this.handleExtensionUpdate(e)}}handleStartup(){console.log("[PromptLint Background] Extension startup"),this.extensionStats.totalActivations++,this.contentScriptStatus.clear()}handleMessage(t,e,r){const o=e.tab?.id;switch(t.type){case"CONTENT_SCRIPT_READY":this.handleContentScriptReady(t,e),r({success:!0});break;case"ERROR_REPORT":this.handleErrorReport(t.error,e),r({success:!0});break;case"GET_EXTENSION_STATUS":r(this.getExtensionStatus(o));break;case"GET_ERROR_STATS":r(this.getErrorStats(o));break;case"CLEAR_ERRORS":this.clearErrors(o),r({success:!0});break;case"REINJECT_CONTENT_SCRIPT":o&&this.reinjectContentScript(o),r({success:!0});break;case"SAVE_API_KEY":this.saveApiKey(t.apiKey).then(n=>r(n));break;case"CLEAR_API_KEY":this.clearApiKey().then(n=>r(n));break;case"TEST_API_KEY":this.testApiKey().then(n=>r(n));break;default:console.warn("[PromptLint Background] Unknown message type:",t.type),r({error:"Unknown message type"})}}handleContentScriptReady(t,e){const r=e.tab?.id;if(!r)return;const o={tabId:r,site:t.site,confidence:t.confidence,hasInputMonitor:t.hasInputMonitor,timestamp:Date.now(),url:e.tab?.url||""};this.contentScriptStatus.set(r,o),this.extensionStats.successfulInitializations++,console.log("[PromptLint Background] Content script ready:",o),this.updateExtensionBadge(r,o)}handleErrorReport(t,e){const r=e.tab?.id,o={...t,tabId:r,url:e.tab?.url};this.errorReports.push(o),this.extensionStats.errorCount++,this.errorReports.length>100&&this.errorReports.shift(),console.warn("[PromptLint Background] Error reported:",o),!t.recoverable&&r&&this.updateExtensionBadge(r,null,!0)}handleTabUpdate(t,e,r){e.url&&(this.contentScriptStatus.delete(t),this.clearExtensionBadge(t)),e.status==="complete"&&r.url&&this.isSupportedSite(r.url)&&console.log("[PromptLint Background] Navigated to supported site:",r.url)}handleTabRemoved(t){this.contentScriptStatus.delete(t),console.log("[PromptLint Background] Tab removed:",t)}handleActionClick(t){if(console.log("[PromptLint Background] Extension icon clicked for tab:",t.id),!t.id)return;!this.contentScriptStatus.get(t.id)&&t.url&&this.isSupportedSite(t.url)&&this.reinjectContentScript(t.id)}updateExtensionBadge(t,e,r=!1){if(r)chrome.action.setBadgeText({text:"!",tabId:t}),chrome.action.setBadgeBackgroundColor({color:"#ea4335",tabId:t}),chrome.action.setTitle({title:"PromptLint - Error occurred. Click to view details.",tabId:t});else if(e){const o=e.confidence>=.8?"âœ“":"~";chrome.action.setBadgeText({text:o,tabId:t}),chrome.action.setBadgeBackgroundColor({color:"#34a853",tabId:t}),chrome.action.setTitle({title:`PromptLint - Active on ${e.site}`,tabId:t})}else this.clearExtensionBadge(t)}clearExtensionBadge(t){chrome.action.setBadgeText({text:"",tabId:t}),chrome.action.setTitle({title:"PromptLint - AI Prompt Quality Assistant",tabId:t})}async reinjectContentScript(t){try{await chrome.scripting.executeScript({target:{tabId:t},files:["content-script.js"]}),console.log("[PromptLint Background] Content script reinjected for tab:",t)}catch(e){console.error("[PromptLint Background] Failed to reinject content script:",e)}}isSupportedSite(t){return["chat.openai.com","chatgpt.com","claude.ai","anthropic.com"].some(r=>t.includes(r))}getExtensionStatus(t){const e=t?this.contentScriptStatus.get(t):null;return{isActive:!!e,currentTab:e||null,stats:this.extensionStats,activeTabsCount:this.contentScriptStatus.size,supportedSites:this.extensionStats.supportedSites}}getErrorStats(t){const e=this.errorReports,r=t?e.filter(n=>n.tabId===t):e,o={};return r.forEach(n=>{o[n.type]=(o[n.type]||0)+1}),{totalErrors:r.length,errorsByType:o,recentErrors:r.slice(-10),recoverableErrors:r.filter(n=>n.recoverable).length}}clearErrors(t){t?this.errorReports=this.errorReports.filter(e=>e.tabId!==t):this.errorReports=[]}showWelcomeNotification(){console.log("[PromptLint Background] Welcome to PromptLint!")}initializeExtensionData(){this.extensionStats.totalActivations=1,console.log("[PromptLint Background] Extension data initialized")}handleExtensionUpdate(t){console.log(`[PromptLint Background] Extension updated from ${t}`)}async saveApiKey(t){try{if(!t||!t.startsWith("sk-")||t.length<25)return{success:!1,error:"Invalid API key format"};const r=new TextEncoder().encode(t),o=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),n=crypto.getRandomValues(new Uint8Array(12)),s=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},o,r),a=await crypto.subtle.exportKey("raw",o);return await chrome.storage.local.set({openai_api_key_encrypted:Array.from(new Uint8Array(s)),openai_api_key_iv:Array.from(n),openai_api_key_key:Array.from(new Uint8Array(a))}),console.log("[PromptLint Background] API key saved successfully"),{success:!0}}catch(e){return console.error("[PromptLint Background] Error saving API key:",e),{success:!1,error:"Failed to encrypt and save API key"}}}async clearApiKey(){try{return await chrome.storage.local.remove(["openai_api_key_encrypted","openai_api_key_iv","openai_api_key_key"]),console.log("[PromptLint Background] API key cleared successfully"),{success:!0}}catch(t){return console.error("[PromptLint Background] Error clearing API key:",t),{success:!1,error:"Failed to clear API key"}}}async testApiKey(){try{const t=await chrome.storage.local.get(["openai_api_key_encrypted","openai_api_key_iv","openai_api_key_key"]);if(!t.openai_api_key_encrypted)return{success:!1,error:"No API key configured"};const e=new Uint8Array(t.openai_api_key_key),r=await crypto.subtle.importKey("raw",e,{name:"AES-GCM"},!1,["decrypt"]),o=new Uint8Array(t.openai_api_key_iv),n=new Uint8Array(t.openai_api_key_encrypted),s=await crypto.subtle.decrypt({name:"AES-GCM",iv:o},r,n),c=new TextDecoder().decode(s),i=await fetch("https://api.openai.com/v1/models",{method:"GET",headers:{Authorization:`Bearer ${c}`,"Content-Type":"application/json"}});if(i.ok)return console.log("[PromptLint Background] API key test successful"),{success:!0};{const l=await i.text();return console.error("[PromptLint Background] API key test failed:",i.status,l),{success:!1,error:`API key test failed: ${i.status}`}}}catch(t){return console.error("[PromptLint Background] Error testing API key:",t),{success:!1,error:"Failed to test API key"}}}}new p;
